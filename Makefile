# this makefile was generated by
include Makefile.app

OS = $(shell uname | tr A-Z a-z)

# Image URL to use all building/pushing image targets
IMG ?= controller:latest
# Produce CRDs that work back to Kubernetes 1.11 (no version conversion)
CRD_OPTIONS ?= "crd:trivialVersions=true"

KUBEBUILDER_VERSION = 2.2.0
VERSION := $(shell git describe --abbrev=0 --tags)
DOCKER_IMAGE = banzaicloud/logging-operator
DOCKER_TAG ?= ${VERSION}
GOFILES_NOVENDOR = $(shell find . -type f -name '*.go' -not -path "./vendor/*" -not -path "./client/*")
GOFILES_NOPLUGINS =  $(shell find . -type f -name '*.go' -not -path "./pkg/sdk/model/filter/*"  -not -path "./pkg/sdk/model/output/*"  -not -path "./pkg/sdk/model/input/*")
PKGS=$(shell go list ./... | grep -v /vendor)

GOLANGCI_VERSION = 1.21.0
GOBIN_VERSION = 0.0.13

export KUBEBUILDER_ASSETS := $(PWD)/bin
export PATH := $(PWD)/bin:$(PATH)

all: manager

# Generate docs
.PHONY: docs
docs:
	go run cmd/docs.go

bin/golangci-lint: bin/golangci-lint-${GOLANGCI_VERSION}
	@ln -sf golangci-lint-${GOLANGCI_VERSION} bin/golangci-lint
bin/golangci-lint-${GOLANGCI_VERSION}:
	@mkdir -p bin
	curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | BINARY=golangci-lint bash -s -- v${GOLANGCI_VERSION}
	@mv bin/golangci-lint $@

.PHONY: lint
lint: bin/golangci-lint ## Run linter
	bin/golangci-lint run
	cd pkg/sdk && golangci-lint run -c ../../.golangci.yml

.PHONY: lint-fix
lint-fix: bin/golangci-lint ## Run linter
	bin/golangci-lint run --fix
	cd pkg/sdk && golangci-lint run -c ../../.golangci.yml --fix

bin/gobin: bin/gobin-${GOBIN_VERSION}
	@ln -sf gobin-${GOBIN_VERSION} bin/gobin
bin/gobin-${GOBIN_VERSION}:
	@mkdir -p bin
	curl -L https://github.com/myitcv/gobin/releases/download/v${GOBIN_VERSION}/${OS}-amd64 > ./bin/gobin-${GOBIN_VERSION} && chmod +x ./bin/gobin-${GOBIN_VERSION}

.PHONY: bin/kubebuilder_${KUBEBUILDER_VERSION}
bin/kubebuilder_${KUBEBUILDER_VERSION}:
	@ if ! test -L bin/kubebuilder_${KUBEBUILDER_VERSION}; then \
		mkdir -p bin; \
		curl -L https://github.com/kubernetes-sigs/kubebuilder/releases/download/v${KUBEBUILDER_VERSION}/kubebuilder_${KUBEBUILDER_VERSION}_${OS}_amd64.tar.gz | tar xvz -C bin; \
		ln -sf kubebuilder_${KUBEBUILDER_VERSION}_${OS}_amd64/bin bin/kubebuilder_${KUBEBUILDER_VERSION}; \
	fi

bin/kubebuilder: bin/kubebuilder_${KUBEBUILDER_VERSION}
	@ln -sf kubebuilder_${KUBEBUILDER_VERSION}/kubebuilder bin/kubebuilder
	@ln -sf kubebuilder_${KUBEBUILDER_VERSION}/kube-apiserver bin/kube-apiserver
	@ln -sf kubebuilder_${KUBEBUILDER_VERSION}/etcd bin/etcd
	@ln -sf kubebuilder_${KUBEBUILDER_VERSION}/kubectl bin/kubectl

# Run tests
test: generate fmt vet manifests bin/kubebuilder
	@which kubebuilder
	@which etcd
	kubebuilder version
	cd pkg/sdk && go test ./...
	go test ./controllers/... ./pkg/... -coverprofile cover.out -v

# Build manager binary
manager: generate fmt vet
	go build -o bin/manager main.go

# Run against the configured Kubernetes cluster in ~/.kube/config
run: generate fmt vet
	go run ./main.go --verbose

# remote debug
debug: manager
	dlv --listen=:40000 --log --headless=true --api-version=2 exec bin/manager -- $(ARGS)

# Install CRDs into a cluster
install: manifests
	kubectl apply -f config/crd/bases

# Deploy controller in the configured Kubernetes cluster in ~/.kube/config
deploy: manifests
	kubectl apply -f config/crd/bases
	kustomize build config/default | kubectl apply -f -

# Generate manifests e.g. CRD, RBAC etc.
manifests: controller-gen
	cd pkg/sdk && $(CONTROLLER_GEN) $(CRD_OPTIONS) rbac:roleName=manager-role webhook paths="./..." output:crd:artifacts:config=../../config/crd/bases output:webhook:artifacts:config=../../config/webhook
	$(CONTROLLER_GEN) $(CRD_OPTIONS) rbac:roleName=manager-role paths="./controllers/..." output:rbac:artifacts:config=./config/rbac
	cp config/crd/bases/* charts/logging-operator/crds/

# Run go fmt against code
fmt:
	go fmt ./...
	cd pkg/sdk && go fmt ./...

# Run go vet against code
vet:
	go vet ./...
	cd pkg/sdk && go vet ./...

# Generate code
generate: controller-gen
	cd pkg/sdk && $(CONTROLLER_GEN) object:headerFile=./../../hack/boilerplate.go.txt paths=./api/...
	cd pkg/sdk && $(CONTROLLER_GEN) object:headerFile=./../../hack/boilerplate.go.txt paths=./model/...
	cd pkg/sdk && $(CONTROLLER_GEN) object:headerFile=./../../hack/boilerplate.go.txt paths=./resourcebuilder/...
	cd pkg/sdk && go generate ./static

# Build the docker image
docker-build:
	docker build . -t ${IMG}
	@echo "updating kustomize image patch file for manager resource"
	sed -i'' -e 's@image: .*@image: '"${IMG}"'@' ./config/default/manager_image_patch.yaml

# Push the docker image
docker-push:
	docker push ${IMG}

# find or download controller-gen
# download controller-gen if necessary
controller-gen: bin/gobin
ifeq (, $(shell which controller-gen))
	@mkdir -p bin
	GOBIN=bin/ GOFLAGS="" bin/gobin sigs.k8s.io/controller-tools/cmd/controller-gen@v0.2.4
CONTROLLER_GEN=$(abspath bin/controller-gen)
else
CONTROLLER_GEN=$(shell which controller-gen)
endif

check-diff: check
	go mod tidy
	$(MAKE) generate manifests docs
	git diff --exit-code ':(exclude)./ADOPTERS.md'
